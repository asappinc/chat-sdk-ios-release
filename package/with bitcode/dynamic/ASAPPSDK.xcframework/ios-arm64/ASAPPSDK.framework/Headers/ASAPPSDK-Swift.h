#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef ASAPPSDK_SWIFT_H
#define ASAPPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ASAPPSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@protocol ASAPPDelegate;
@class ASAPPConfig;
@class ASAPPUser;
@class ASAPPStyles;
@class ASAPPStrings;
@class ASAPPViews;
enum ASAPPLogLevel : NSInteger;
@class UIViewController;
@class NSNumber;
@class NSData;
enum ASAPPError : NSInteger;

/// The <code>ASAPP</code> class holds references to its various configurable properties and allows you
/// to call various functions. No instances of <code>ASAPP</code> are to be created.
SWIFT_CLASS_NAMED("ASAPP")
@interface ASAPP : NSObject
/// A <code>String</code> representing the SDK version in x.y.z format.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientVersion;)
+ (NSString * _Nonnull)clientVersion SWIFT_WARN_UNUSED_RESULT;
/// The delegate, whose methods are called to allow you to respond to various events.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <ASAPPDelegate> _Nullable delegate;)
+ (id <ASAPPDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ASAPPDelegate> _Nullable)value;
/// Set by calling <code>ASAPP.initialize(with:)</code>, typically in the <code>AppDelegate</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASAPPConfig * _Null_unspecified config;)
+ (ASAPPConfig * _Null_unspecified)config SWIFT_WARN_UNUSED_RESULT;
/// The current user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPUser * _Null_unspecified user;)
+ (ASAPPUser * _Null_unspecified)user SWIFT_WARN_UNUSED_RESULT;
+ (void)setUser:(ASAPPUser * _Null_unspecified)value;
/// The SDK can be styled to fit your brand.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPStyles * _Nonnull styles;)
+ (ASAPPStyles * _Nonnull)styles SWIFT_WARN_UNUSED_RESULT;
+ (void)setStyles:(ASAPPStyles * _Nonnull)value;
/// Strings displayed by the SDK can be customized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPStrings * _Nonnull strings;)
+ (ASAPPStrings * _Nonnull)strings SWIFT_WARN_UNUSED_RESULT;
+ (void)setStrings:(ASAPPStrings * _Nonnull)value;
/// Certain views displayed by the SDK can be customized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPViews * _Nonnull views;)
+ (ASAPPViews * _Nonnull)views SWIFT_WARN_UNUSED_RESULT;
+ (void)setViews:(ASAPPViews * _Nonnull)value;
/// Verbosity of the debugging log. Defaults to <code>.errors</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ASAPPLogLevel debugLogLevel;)
+ (enum ASAPPLogLevel)debugLogLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebugLogLevel:(enum ASAPPLogLevel)value;
/// Sets the <code>config</code> property.
/// \param config An <code>ASAPPConfig</code> instance used to configure the SDK.
///
+ (void)initializeWith:(ASAPPConfig * _Nonnull)config;
/// Creates a chat view controller, ready to be pushed onto a navigation stack.
/// \param userInfo A user info dictionary containing notification metadata
///
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPushingFromNotificationWith:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller, ready to be pushed onto a navigation stack. Starts a conversation with the provided intent.
/// \param intent A dictionary containing intent data
///
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPushingWithIntent:(NSDictionary<NSString *, id> * _Nonnull)intent SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller in a navigation controller, ready to be presented modally.
/// \param userInfo A user info dictionary containing notification metadata
///
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPresentingFromNotificationWith:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller in a navigation controller, ready to be presented modally. Starts a conversation with the provided intent.
/// \param intent A dictionary containing intent data
///
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPresentingWithIntent:(NSDictionary<NSString *, id> * _Nonnull)intent SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller in a navigation controller, ready to be presented modally. Use this method only when opening chat from the Chat Instead menu.
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPresentingFromChatInstead SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller, ready to be pushed onto a navigation stack. Use this method only when opening chat from the Chat Instead menu.
/// SDK channel.
///
/// returns:
/// A <code>UIViewController</code> if <code>ASAPP.config</code> and <code>ASAPP.user</code> are set; otherwise returns <code>nil</code>.
+ (UIViewController * _Nullable)createChatViewControllerForPushingFromChatInstead SWIFT_WARN_UNUSED_RESULT;
/// Only used for Objective-C compatibility. See <code>shouldRequestCameraAuthorization</code> for functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSNumber * _Nullable objcShouldRequestCameraAuthorization;)
+ (NSNumber * _Nullable)objcShouldRequestCameraAuthorization SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjcShouldRequestCameraAuthorization:(NSNumber * _Nullable)value;
/// Only used for Objective-C compatibility. See <code>shouldRequestPhotoLibraryAuthorization</code> for functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSNumber * _Nullable objcShouldRequestPhotoLibraryAuthorization;)
+ (NSNumber * _Nullable)objcShouldRequestPhotoLibraryAuthorization SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjcShouldRequestPhotoLibraryAuthorization:(NSNumber * _Nullable)value;
/// Whether the SDK should request notification authorization. An ASAPP-provided custom UI
/// is shown before triggering the OS level alert.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldRequestNotificationAuthorization;)
+ (BOOL)shouldRequestNotificationAuthorization SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldRequestNotificationAuthorization:(BOOL)value;
/// Called when the user denies notification authorization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable notificationAuthorizationDenied)(void);)
+ (void (^ _Nullable)(void))notificationAuthorizationDenied SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationAuthorizationDenied:(void (^ _Nullable)(void))value;
/// Enables ASAPP push notifications for this device. The device token is saved in memory for later use when registering.
/// \param deviceToken The token provided by APNS in <code>didRegisterForRemoteNotificationsWithDeviceToken(_:)</code>
///
+ (void)enablePushNotificationsWith:(NSData * _Nonnull)deviceToken;
/// Enables ASAPP push notifications for this device. The UUID is saved in memory for later use when registering.
/// \param uuid An arbitrary string used by a separate push notification system to uniquely identify the device.
///
+ (void)enablePushNotificationsWithUUID:(NSString * _Nonnull)uuid;
/// Disables ASAPP push notifications for this device. The device is then deleted from local storage. If no error was
/// returned then disabling has succeeded. Be sure to call this <em>before</em> changing or clearing <code>ASAPP.user</code>.
/// \param failure A <code>FailureHandler</code> that receives an error if one occurs
///
+ (void)disablePushNotificationsWithFailure:(void (^ _Nonnull)(enum ASAPPError))failure;
/// Skips to the bottom of the chat such that the latest message is visible.
+ (void)skipToBottom;
/// Gets the number of messages the user received while offline as well as whether user is currently in a live chat.
/// \param success A <code>ChatStatusHandler</code> that receives the number of unread ASAPP push notifications and the live chat status.
///
/// \param failure A <code>FailureHandler</code> that receives an error if one occurs
///
+ (void)getChatStatusWithSuccess:(void (^ _Nonnull)(NSInteger, BOOL))success failure:(void (^ _Nonnull)(enum ASAPPError))failure;
/// Should be called to detect an ASAPP notification before calling
/// <code>createChatViewControllerForPresenting(fromNotificationWith:appCallbackHandler:)</code>.
/// \param userInfo A user info dictionary containing notification metadata
///
///
/// returns:
/// Whether the SDK can handle a notification.
+ (BOOL)canHandleNotificationWith:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Clears the session saved on disk.
+ (void)clearSavedSession;
/// Sets the intent on the current chat view controller. This is meant to be called only when a chat view controller
/// already exists. If there is no ChatViewController please use one of the <code>createChatViewControllerFor...</code> functions.
/// \param data A dictionary with intent data. e.g. <code>["Code": "EXAMPLE_INTENT"]</code>
///
+ (void)setIntent:(NSDictionary<NSString *, id> * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Allowed orientations to display ASAPP, defaults to <code>.portraitLocked</code>.
typedef SWIFT_ENUM(NSInteger, ASAPPAllowedOrientations, open) {
/// Only portrait.
  ASAPPAllowedOrientationsPortraitLocked = 0,
/// Only portait on iPhone, but allows landscape left/right and portrait on iPad.
  ASAPPAllowedOrientationsIPadLandscapeAllowed = 1,
};

@class UIColor;

/// Used for configuring the styles of a button. For example, assign an instance to <code>ASAPPColors.quickReplyButton</code>.
SWIFT_CLASS_NAMED("ASAPPButtonColors")
@interface ASAPPButtonColors : NSObject
/// The color of the button’s background.
@property (nonatomic, strong) UIColor * _Nonnull backgroundNormal;
/// The color of the button’s background when tapped or otherwise highlighted. This property has been deprecated and will be removed in the next major version.
@property (nonatomic, strong) UIColor * _Nonnull backgroundHighlighted SWIFT_DEPRECATED;
/// The color of the button’s background when disabled.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDisabled;
/// The color of the button’s text.
@property (nonatomic, strong) UIColor * _Nonnull textNormal;
/// The color of the button’s text when tapped or otherwise highlighted.
@property (nonatomic, strong) UIColor * _Nonnull textHighlighted;
/// The color of the button’s text when disabled.
@property (nonatomic, strong) UIColor * _Nonnull textDisabled;
/// The color of the button’s border.
@property (nonatomic, strong) UIColor * _Nullable border;
/// Creates an instance of <code>ASAPPButtonColors</code> with the given properties.
/// \param backgroundNormal The normal background color.
///
/// \param backgroundHighlighted The highlighted background color.
///
/// \param backgroundDisabled The disabled background color.
///
/// \param textNormal The normal text color.
///
/// \param textHighlighted The highlighted text color.
///
/// \param border The border color. Optional.
///
- (nonnull instancetype)initWithBackgroundNormal:(UIColor * _Nonnull)backgroundNormal backgroundHighlighted:(UIColor * _Nonnull)backgroundHighlighted backgroundDisabled:(UIColor * _Nonnull)backgroundDisabled textNormal:(UIColor * _Nonnull)textNormal textHighlighted:(UIColor * _Nonnull)textHighlighted textDisabled:(UIColor * _Nonnull)textDisabled border:(UIColor * _Nullable)border OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with the given background colors and textColor. Highlighted and disabled textColors are automatically generated.
/// \param backgroundNormal The normal background color.
///
/// \param backgroundHighlighted The highlighted background color.
///
/// \param backgroundDisabled The disabled background color.
///
/// \param textColor The normal text color.
///
/// \param border The border color. Optional.
///
- (nonnull instancetype)initWithBackgroundNormal:(UIColor * _Nonnull)backgroundNormal backgroundHighlighted:(UIColor * _Nonnull)backgroundHighlighted backgroundDisabled:(UIColor * _Nonnull)backgroundDisabled textColor:(UIColor * _Nonnull)textColor border:(UIColor * _Nullable)border OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a text color. Highlighted and disabled text colors
/// are automatically generated. Background colors are set to <code>UIColor.clear</code>.
/// \param textColor The normal text color.
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a background and text color. A highlighted background
/// color and a disabled text color are automatically generated.
/// \param backgroundColor The background color.
///
/// \param textColor The text color.
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a background, text, and border color. A highlighted
/// background and disabled text color are automatically generated.
/// \param backgroundColor The background color.
///
/// \param textColor The text color.
///
/// \param borderColor The border color. Optional.
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textColor:(UIColor * _Nonnull)textColor border:(UIColor * _Nullable)border OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Indicates a service channel type, like ASAPP chat or a phone call.
typedef SWIFT_ENUM(NSInteger, ASAPPChannel, open) {
/// ASAPP chat
  ASAPPChannelChat = 0,
/// phone call
  ASAPPChannelPhone = 1,
};


/// Defines methods that may be called by a <code>ASAPPChatInsteadViewController</code> instance.
SWIFT_PROTOCOL("_TtP8ASAPPSDK20ASAPPChannelDelegate_")
@protocol ASAPPChannelDelegate
@optional
/// Called every time the user selects a channel to open. Return <code>false</code> if you want to handle the action yourself. Otherwise, the SDK will
/// handle the action automatically. Returns <code>true</code> by default. Note that this doesn’t include the chat channel, as it must be handled by <code>didSelectASAPPChatChannel()</code>.
/// \param channel The enum indicating which channel was selected.
///
- (BOOL)shouldOpenChannel:(enum ASAPPChannel)channel SWIFT_WARN_UNUSED_RESULT;
@required
/// Called if there was an error when attempting to open a channel.
/// \param channel An enum case indicating which channel failed to open.
///
/// \param errorDescription A String with information about the error.
///
- (void)channel:(enum ASAPPChannel)channel didFailToOpenWithErrorDescription:(NSString * _Nullable)errorDescription;
/// Called if the ASAPP chat channel is selected. The implementation must use either <code>createChatViewControllerForPresentingFromChatInstead</code> or
/// <code>createChatViewControllerForPushingFromChatInstead</code> to open chat.
- (void)didSelectASAPPChatChannel;
@end

@class UIImage;
@class NSCoder;
@class NSBundle;

/// Shows the UI for Chat Instead.
SWIFT_CLASS_NAMED("ASAPPChatInsteadViewController")
@interface ASAPPChatInsteadViewController : UIViewController
/// :nodoc:
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// Designated initializer. Note that creating an instance of this class
/// will automatically try to fetch remote settings. We recommend you create an instance well in advance of showing the view controller.
/// \param phoneNumber The phone number to call when the phone channel is selected. Must be a valid phone number.
///
/// \param delegate An object implementing <code>ChatInsteadChannelDelegate</code>.
///
/// \param title A title which is displayed at the top of the Chat Instead UI. If no title is provided, a default value will be used. Please note that
/// if there’s a new title when fetching settings, that one is going to be displayed.
///
/// \param chatIcon You can customize the icon for the Chat channel.
///
- (nonnull instancetype)initWithPhoneNumber:(NSString * _Nonnull)phoneNumber delegate:(id <ASAPPChannelDelegate> _Nonnull)delegate title:(NSString * _Nullable)title chatIcon:(UIImage * _Nullable)chatIcon OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UITraitCollection;

@interface ASAPPChatInsteadViewController (SWIFT_EXTENSION(ASAPPSDK))
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


@protocol UIViewControllerAnimatedTransitioning;

@interface ASAPPChatInsteadViewController (SWIFT_EXTENSION(ASAPPSDK)) <UIViewControllerTransitioningDelegate>
/// :nodoc:
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UICollectionViewLayout;
@class UICollectionReusableView;

@interface ASAPPChatInsteadViewController (SWIFT_EXTENSION(ASAPPSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class ASAPPInputColors;

/// Configurable colors for various parts of the SDK.
SWIFT_CLASS_NAMED("ASAPPColors")
@interface ASAPPColors : NSObject
/// The color of most primary text and UI elements such as icons and buttons without a background.
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The color of text and other elements that appear on top of the primary color.
@property (nonatomic, strong) UIColor * _Nonnull onPrimary;
/// The color of most secondary text and UI elements.
@property (nonatomic, strong) UIColor * _Nonnull onBackground;
/// The background color of the navigation bar.
@property (nonatomic, strong) UIColor * _Nullable navBarBackground;
/// The color of the navigation bar title text.
@property (nonatomic, strong) UIColor * _Nonnull navBarTitle;
/// The color of navigation bar buttons in the chat view, as well as the color of the close/back button.
@property (nonatomic, strong) UIColor * _Nonnull navBarButton;
/// The color of navigation bar buttons while tapped.
@property (nonatomic, strong) UIColor * _Nonnull navBarButtonActive;
/// The color of the background of most elements.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of most separators.
@property (nonatomic, strong) UIColor * _Nonnull separatorPrimary;
/// The color of secondary separators, such as the borders of checkboxes and tabs.
@property (nonatomic, strong) UIColor * _Nonnull separatorSecondary;
/// The color of the active portion of controls, such as checkboxes, progress bars, radio buttons, sliders, and tabs.
@property (nonatomic, strong) UIColor * _Nonnull controlTint;
/// The color of the secondary portion of some controls, such as the background of progress bars and the underline of text inputs.
@property (nonatomic, strong) UIColor * _Nonnull controlSecondary;
/// The color of the background of certain parts of controls such as text areas, text input, dropdowns, checkboxes, and radio button views.
@property (nonatomic, strong) UIColor * _Nonnull controlBackground;
/// The color of UI elements representing success and the default color of buttons representing a positive choice.
@property (nonatomic, strong) UIColor * _Nonnull success;
/// The color of the connection status banner’s background while disconnected and other UI elements displaying a warning.
@property (nonatomic, strong) UIColor * _Nonnull warning;
/// The color of UI elements representing failure and the default color of buttons representing a negative choice.
@property (nonatomic, strong) UIColor * _Nonnull failure;
/// The color of text buttons, usually an accent color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull textButtonPrimary;
/// The colors of block-style buttons for primary actions, usually an accent color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull buttonPrimary;
/// The colors of block-style buttons for secondary actions like cancelling, usually a muted color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull buttonSecondary;
/// The list of colors for the messages list’s background gradient.
@property (nonatomic, strong) UIColor * _Nonnull messagesListBackground;
/// The color of chat message text.
@property (nonatomic, strong) UIColor * _Nonnull messageText;
/// The color of the background of chat messages sent by the user.
@property (nonatomic, strong) UIColor * _Nonnull messageBackground;
/// The color of the border of chat messages sent by the user.
@property (nonatomic, strong) UIColor * _Nullable messageBorder;
/// The color of chat message reply text.
@property (nonatomic, strong) UIColor * _Nonnull replyMessageText;
/// The color of the background of chat message replies.
@property (nonatomic, strong) UIColor * _Nonnull replyMessageBackground;
/// The color of the border of chat message replies.
@property (nonatomic, strong) UIColor * _Nonnull replyMessageBorder;
/// The colors of quick reply buttons.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull quickReplyButton;
/// The colors of action buttons.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull actionButton;
/// The colors of the chat input text area.
@property (nonatomic, strong) ASAPPInputColors * _Nonnull chatInput;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Configuration for the SDK’s connection to the API.
SWIFT_CLASS_NAMED("ASAPPConfig")
@interface ASAPPConfig : NSObject
/// Your app identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Host name for connecting to the API.
@property (nonatomic, readonly, copy) NSString * _Nonnull apiHostName;
/// Your app’s client secret.
@property (nonatomic, readonly, copy) NSString * _Nonnull clientSecret;
/// Your app’s supported languages.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedLanguages;
/// Your app’s region code.
@property (nonatomic, readonly, copy) NSString * _Nonnull regionCode;
/// Creates an instance of <code>ASAPPConfig</code> with the given parameters.
/// \param appId Your app identifier. Also known as the company marker.
///
/// \param apiHostName Host name for connecting to the API.
///
/// \param clientSecret Your app’s client secret used when connecting to the API.
///
/// \param supportedLanguages Your app’s supported languages, in order of preference, as an array of language tag strings. Strings can be in the format “{ISO 639-1 Code}-{ISO 3166-1 Code}” or “{ISO 639-1 Code}”, such as “en-us” or “en”. Defaults to [“en”].
///
/// \param regionCode Your app’s region code. Defaults to “US”.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId apiHostName:(NSString * _Nonnull)apiHostName clientSecret:(NSString * _Nonnull)clientSecret supportedLanguages:(NSArray<NSString *> * _Nonnull)supportedLanguages regionCode:(NSString * _Nonnull)regionCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface ASAPPConfig (SWIFT_EXTENSION(ASAPPSDK))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Used to define an icon for a button.
SWIFT_CLASS_NAMED("ASAPPCustomImage")
@interface ASAPPCustomImage : NSObject
/// The button image.
@property (nonatomic, strong) UIImage * _Nonnull image;
/// The size of the image.
@property (nonatomic) CGSize size;
/// The insets of the button.
@property (nonatomic) UIEdgeInsets insets;
/// Creates an instance of <code>ASAPPCustomImage</code> with the given parameters.
/// \param image The button image.
///
/// \param size The size of the image.
///
/// \param insets The button insets. Optional.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image size:(CGSize)size insets:(UIEdgeInsets)insets OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// A protocol defining functions that can be called by the framework.
SWIFT_PROTOCOL("_TtP8ASAPPSDK13ASAPPDelegate_")
@protocol ASAPPDelegate
/// Called when a user taps on a login button. Please set <code>ASAPP.user</code> once the user has logged in.
- (void)chatViewControllerDidTapUserLoginButton;
/// Called when the ASAPP view controller has disappeared.
- (void)chatViewControllerDidDisappear;
/// Called when a user taps on a deep link.
- (void)chatViewControllerDidTapDeepLinkWithName:(NSString * _Nonnull)name data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Called when a user taps on a web link. Please return <code>true</code> if ASAPP should open the web link or <code>false</code> otherwise.
- (BOOL)chatViewControllerShouldHandleWebLinkWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Called when certain agreed-upon events occur during a chat.
- (void)chatViewControllerDidReceiveChatEventWithName:(NSString * _Nonnull)name data:(NSDictionary<NSString *, id> * _Nullable)data;
@end

/// An enum defining common errors that can occur
typedef SWIFT_ENUM(NSInteger, ASAPPError, open) {
/// Error indicating getting chat status failed
  ASAPPErrorGetChatStatusFailed = 0,
/// Error indicating deregistering for push notifications failed
  ASAPPErrorPushDeregistrationFailed = 1,
/// Error indicating authentication has failed
  ASAPPErrorAuthenticationFailed = 2,
/// Error indicating opening a Chat Instead channel has failed
  ASAPPErrorOpenChannelFailed = 3,
};

@class UIFont;

/// Represents a font family used by default styles.
SWIFT_CLASS_NAMED("ASAPPFontFamily")
@interface ASAPPFontFamily : NSObject
/// The lightest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull light;
/// The second-lightest weight, used for body text.
@property (nonatomic, readonly, strong) UIFont * _Nonnull regular;
/// The second-heaviest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull medium;
/// The heaviest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull bold;
/// Creates an <code>ASAPPFontFamily</code> instance given the <code>UIFont</code> for each weight.
/// \param light A light-weight <code>UIFont</code>.
///
/// \param regular A regular-weight <code>UIFont</code>.
///
/// \param medium A medium-weight or semi-bold <code>UIFont</code>.
///
/// \param bold A heavy-weight <code>UIFont</code>.
///
- (nonnull instancetype)initWithLight:(UIFont * _Nonnull)light regular:(UIFont * _Nonnull)regular medium:(UIFont * _Nonnull)medium bold:(UIFont * _Nonnull)bold OBJC_DESIGNATED_INITIALIZER;
/// Creates an <code>ASAPPFontFamily</code> instance given the font name for each weight.
/// \param light name of light font file.
///
/// \param regular name of regular font file.
///
/// \param medium name of medium or semi-bold font file.
///
/// \param bold name of bold font file.
///
- (nullable instancetype)initWithLightFontName:(NSString * _Nonnull)lightFontName regularFontName:(NSString * _Nonnull)regularFontName mediumFontName:(NSString * _Nonnull)mediumFontName boldFontName:(NSString * _Nonnull)boldFontName OBJC_DESIGNATED_INITIALIZER;
/// Creates an <code>ASAPPFontFamily</code> instance representing the SDK’s default font family (the system font).
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used to configure the colors of text input area in the chat view.
SWIFT_CLASS_NAMED("ASAPPInputColors")
@interface ASAPPInputColors : NSObject
/// The color of the background of the input area.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of the text.
@property (nonatomic, strong) UIColor * _Nonnull text;
/// The color of the placeholder text, visible before anything has been typed.
@property (nonatomic, strong) UIColor * _Nonnull placeholderText;
/// The tint color of the text area (used by the cursor).
@property (nonatomic, strong) UIColor * _Nonnull tint;
/// The color of the border of the text area.
@property (nonatomic, strong) UIColor * _Nullable border;
/// The fill (or text) color of the send button.
@property (nonatomic, strong) UIColor * _Nonnull primaryButton;
/// The color of the media attachment button.
@property (nonatomic, strong) UIColor * _Nonnull secondaryButton;
/// Creates an instance of <code>ASAPPInputColors</code> with the given parameters.
/// \param background The background color.
///
/// \param placeholderText The placeholder text color.
///
/// \param tint The tint color.
///
/// \param border The border color.
///
/// \param primaryButton The primary button color.
///
/// \param secondaryButton The secondary button color.
///
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background text:(UIColor * _Nonnull)text placeholderText:(UIColor * _Nonnull)placeholderText tint:(UIColor * _Nonnull)tint border:(UIColor * _Nullable)border primaryButton:(UIColor * _Nonnull)primaryButton secondaryButton:(UIColor * _Nonnull)secondaryButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the verbosity level of the debugging log.
typedef SWIFT_ENUM(NSInteger, ASAPPLogLevel, open) {
/// Silence.
  ASAPPLogLevelNone = 0,
/// Prints only errors.
  ASAPPLogLevelErrors = 1,
/// Prints errors and warnings.
  ASAPPLogLevelWarning = 2,
/// Prints errors, warnings, and most debugging information.
  ASAPPLogLevelDebug = 3,
/// Prints everything, including very long messages.
  ASAPPLogLevelInfo = 4,
};


/// Customizable images for navigation bar buttons.
SWIFT_CLASS_NAMED("ASAPPNavBarButtonImages")
@interface ASAPPNavBarButtonImages : NSObject
/// The close button appears in the top right when the view controller is presented modally. Defaults to an ✕.
@property (nonatomic, strong) ASAPPCustomImage * _Nullable close;
/// The back button appears in the top left when the view controller is pushed into a navigation stack. Defaults to a ‹.
@property (nonatomic, strong) ASAPPCustomImage * _Nullable back;
/// The more button appears in the chat view when chatting with an agent and lets the user end the live chat. Defaults to a ⋮.
@property (nonatomic, strong) ASAPPCustomImage * _Nullable more;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Customizable navigation bar styles.
SWIFT_CLASS_NAMED("ASAPPNavBarStyles")
@interface ASAPPNavBarStyles : NSObject
/// The images used in navigation bar buttons.
@property (nonatomic, strong) ASAPPNavBarButtonImages * _Nonnull buttonImages;
/// The edge insets for the navigation bar title. Defaults to 8 on the sides.
@property (nonatomic) UIEdgeInsets titlePadding;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the corner rounding style of primary Component buttons.
SWIFT_CLASS_NAMED("ASAPPPrimaryButtonRoundingStyle")
@interface ASAPPPrimaryButtonRoundingStyle : NSObject
/// Fully rounded, equivalent to a radius of half the height of the button
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPPrimaryButtonRoundingStyle * _Nonnull pill;)
+ (ASAPPPrimaryButtonRoundingStyle * _Nonnull)pill SWIFT_WARN_UNUSED_RESULT;
+ (void)setPill:(ASAPPPrimaryButtonRoundingStyle * _Nonnull)value;
/// Custom corner radius
+ (ASAPPPrimaryButtonRoundingStyle * _Nonnull)radius:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Customizable strings for various parts of the UI.
SWIFT_CLASS_NAMED("ASAPPStrings")
@interface ASAPPStrings : NSObject
/// The accessibility label for the close/back button.
@property (nonatomic, copy) NSString * _Nonnull accessibilityClose;
/// The accessibiltiy label for the more button.
@property (nonatomic, copy) NSString * _Nonnull accessibilityMore;
/// The accessibility label for the send button.
@property (nonatomic, copy) NSString * _Nonnull accessibilitySend;
/// The text displayed in the chat view when a connection has been established.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerConnected;
/// The text displayed in the chat view when a connection is being established.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerConnecting;
/// The text displayed in the chat view when a connection is being established and the user tries to send a message.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerConnectingWhenSending;
/// The text displayed in the chat view when there is no connection available.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerDisconnected;
/// The text displayed in the chat view when there is no connection available and the user tries to send a message.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerNotConnectedWhenSending;
/// The text displayed in the chat view when the user tries to send a message and the request fails.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerFailedToSend;
/// The text displayed in the chat view when the user tries to send a message larger than 10,000 characters.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerMessageTooLong;
/// The title for the chat view. Overridden by <code>ASAPPViews.chatTitle</code>. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable chatTitle;
/// The text for the action sheet button that ends the current live chat.
@property (nonatomic, copy) NSString * _Nonnull endChatTitle;
/// The placeholder text for the input field of the chat view.
@property (nonatomic, copy) NSString * _Nonnull chatInputPlaceholder;
/// The text for the restart button in the quick replies view.
@property (nonatomic, copy) NSString * _Nonnull quickRepliesRestartButton;
/// The text displayed in the chat view when the user taps a message button that tries to load an inline form and the request fails.
@property (nonatomic, copy) NSString * _Nonnull inlineFormFailedToLoad;
/// The text displayed when the screen contents are hidden.
@property (nonatomic, copy) NSString * _Nonnull secureScreenCoverText;
/// The title displayed when a request fails to send.
@property (nonatomic, copy) NSString * _Nonnull requestErrorGenericFailureTitle;
/// The text displayed when a request fails to send.
@property (nonatomic, copy) NSString * _Nonnull requestErrorGenericFailure;
/// The text displayed when a message fails to be delivered during live chat.
@property (nonatomic, copy) NSString * _Nonnull messageFailedToSend;
/// The text for the dismiss button of a generic error alert.
@property (nonatomic, copy) NSString * _Nonnull alertDismissButton;
/// The text displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreen;
/// The text for the retry button displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreenReloadButton;
/// The text for the close button displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreenCloseButton;
/// The text displayed next to a required form field that was left empty.
@property (nonatomic, copy) NSString * _Nonnull requiredFieldEmptyMessage;
/// The text of the alert shown when one or more required fields are empty when trying to submit a form.
@property (nonatomic, copy) NSString * _Nonnull requiredFieldsEmptyErrorMessage;
/// The title for the alert displayed when ending chat.
@property (nonatomic, copy) NSString * _Nonnull restartConfirmationTitle;
/// The text for the alert displayed when ending chat.
@property (nonatomic, copy) NSString * _Nonnull restartConfirmationBody;
/// The text for the confirmation button of the end chat alert.
@property (nonatomic, copy) NSString * _Nonnull restartConfirmationRestartButton;
/// The text for the cancel button of the end chat alert.
@property (nonatomic, copy) NSString * _Nonnull restartConfirmationHideButton;
/// The text for the cancel button of the modal.
@property (nonatomic, copy) NSString * _Nonnull modalViewCancelButton;
/// The text for the submit button of the modal.
@property (nonatomic, copy) NSString * _Nonnull modalViewSubmitButton;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull modalViewDoneButton;
/// The title of the alert shown when camera or photo library permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull mediaPermissionsErrorTitle;
/// The text of the alert shown when camera permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull mediaPermissionsErrorMessage;
/// The text for the cancel button of the alert shown when camera or photo library permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull mediaPermissionsErrorCancelButton;
/// The text for the go-to-settings button of the alert shown when camera or photo library permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull mediaPermissionsErrorSettingsButton;
/// The accessibility label for the Chat Instead menu’s close button.
@property (nonatomic, copy) NSString * _Nonnull accessibilityCloseChatInstead;
/// The title for the alert displayed when leaving the queue.
@property (nonatomic, copy) NSString * _Nonnull leaveQueueConfirmationTitle;
/// The text for the alert displayed when leaving the queue.
@property (nonatomic, copy) NSString * _Nonnull leaveQueueConfirmationBodyTitle;
/// The text for the confirmation button of the leave queue alert.
@property (nonatomic, copy) NSString * _Nonnull leaveQueueConfirmationButton;
/// The text for the cancel button of the leave queue alert.
@property (nonatomic, copy) NSString * _Nonnull leaveQueueConfirmationHideButton;
/// The body text for the view shown when the user is already connected to support via a phone call.
@property (nonatomic, copy) NSString * _Nonnull callInProgressBody;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASAPPTextStyles;

/// Holds customizable styles and other visual SDK settings.
SWIFT_CLASS_NAMED("ASAPPStyles")
@interface ASAPPStyles : NSObject
/// Customizable text styles.
@property (nonatomic, strong) ASAPPTextStyles * _Nonnull textStyles;
/// Customizable colors.
@property (nonatomic, strong) ASAPPColors * _Nonnull colors;
/// Customizable navigation bar styles.
@property (nonatomic, strong) ASAPPNavBarStyles * _Nonnull navBarStyles;
/// The rounding style of primary Component buttons. .pill is equivalent to a radius of half the height of the button. Defaults to .radius(0).
@property (nonatomic, strong) ASAPPPrimaryButtonRoundingStyle * _Nonnull primaryButtonRoundingStyle;
/// The orientation(s) in which ASAPP is allowed to appear.
/// Defaults to <code>.portraitLocked</code>.
/// Notes:
/// <ol>
///   <li>
///     Landscape orientation is not supported on iPhone.
///   </li>
///   <li>
///     With iOS 11+, when the client app is launched in Landscape mode and ASAPP is presented
///     in Landscape and then a transition is made to portrait, the keyboard input will detach from the keyboard.
///     To avoid this known issue, please rotate to the desired orientation before presenting ASAPP.
///   </li>
/// </ol>
@property (nonatomic) enum ASAPPAllowedOrientations allowedOrientations;
/// Whether Dark Mode is allowed. Defaults to <code>false</code>. Set this to <code>true</code> to make the ASAPP interface respect the system Dark Mode setting. Make sure the color you assigned to <code>ASAPP.styles.colors.primary</code> has a dark variant, as well as any other colors you may have overridden. To define dark variants, change the “Appearances” setting for a color set in an asset catalog.
@property (nonatomic) BOOL isDarkModeAllowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ASAPPCaseStyle : NSInteger;

/// Used to define a text style.
SWIFT_CLASS_NAMED("ASAPPTextStyle")
@interface ASAPPTextStyle : NSObject
/// Creates an instance of <code>ASAPPTextStyle</code> with the given parameters.
/// \param font The font.
///
/// \param size The default size.
///
/// \param letterSpacing The amount of space between characters.
///
/// \param color The text color.
///
/// \param case The case style. Defaults to .original.
///
- (nonnull instancetype)initWithFont:(UIFont * _Nonnull)font size:(CGFloat)size letterSpacing:(CGFloat)letterSpacing color:(UIColor * _Nonnull)color case:(enum ASAPPCaseStyle)case_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Case style of text.
typedef SWIFT_ENUM_NAMED(NSInteger, ASAPPCaseStyle, "ASAPPCaseStyle", open) {
/// UPPERCASE
  ASAPPCaseStyleUpper = 0,
/// Start Case
  ASAPPCaseStyleStart = 1,
/// Original case, without Changes
  ASAPPCaseStyleOriginal = 2,
};


/// Customizable text styles for various classes of text.
SWIFT_CLASS_NAMED("ASAPPTextStyles")
@interface ASAPPTextStyles : NSObject
/// The style of navigation bar buttons.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull navButton;
/// The text style of buttons.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull button;
/// The style of action buttons.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull actionButton;
/// The style of links.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull link;
/// The style of top-level headers.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull header1;
/// The style of second-level headers.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull header2;
/// The style of third-level headers.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull header3;
/// The style of subheaders.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull subheader;
/// The style of body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull body;
/// The style of bold body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull bodyBold;
/// The style of secondary body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull body2;
/// The style of bold secondary body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull bodyBold2;
/// The style of top-level detail text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull detail1;
/// The style of second-level detail text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull detail2;
/// The style of error text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull error;
/// Updates all text styles above with the given font family.
/// \param fontFamily The font family to apply to all text styles. Each text style will use an appropriate weight.
///
- (void)updateStylesFor:(ASAPPFontFamily * _Nonnull)fontFamily;
/// Updates all text styles above with the given color.
/// \param color The color to apply to all text styles. Each text style will use the color at an appropriate opacity.
///
- (void)updateColorsWith:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Holds configuration information pertaining to the current user session.
SWIFT_CLASS_NAMED("ASAPPUser")
@interface ASAPPUser : NSObject
/// Whether the user is anonymous.
@property (nonatomic, readonly) BOOL isAnonymous;
/// Unique identifier for the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userIdentifier;
/// Reference to context provider given at initialization.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull (^ _Nonnull requestContextProvider)(BOOL);
/// Creates an <code>ASAPPUser</code> instance.
/// \param userIdentifier A unique <code>String</code> identifier for the user. If <code>nil</code>, the user is anonymous and a special identifier will be automatically generated.
///
/// \param requestContextProvider A function called to provide context information when making requests.
///
/// \param userLoginHandler A function called when the user login action is performed.
///
- (nonnull instancetype)initWithUserIdentifier:(NSString * _Nullable)userIdentifier requestContextProvider:(NSDictionary<NSString *, id> * _Nonnull (^ _Nonnull)(BOOL))requestContextProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc:
SWIFT_CLASS_NAMED("ASAPPViewController")
@interface ASAPPViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Overrides <code>UIViewController.viewDidLoad()</code>.
- (void)viewDidLoad;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
/// Overrides <code>UIViewController.viewWillLayoutSubviews()</code>.
- (void)viewWillLayoutSubviews;
@end



@interface ASAPPViewController (SWIFT_EXTENSION(ASAPPSDK))
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end






@interface ASAPPViewController (SWIFT_EXTENSION(ASAPPSDK))
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) UIStatusBarAnimation preferredStatusBarUpdateAnimation;
@end

@class UIView;

/// Holds references to optional custom views.
SWIFT_CLASS_NAMED("ASAPPViews")
@interface ASAPPViews : NSObject
/// The title view displayed in the navigation bar when viewing live chat. Overrides <code>ASAPPStrings.chatTitle</code>.
@property (nonatomic, strong) UIView * _Nullable chatTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CALayer;

/// Represents a subclass of <code>UIImageView</code> for displaying animated image.
/// Different from showing animated image in a normal <code>UIImageView</code> (which load all frames at one time),
/// <code>AnimatedImageView</code> only tries to load several frames (defined by <code>framePreloadCount</code>) to reduce memory usage.
/// It provides a tradeoff between memory usage and CPU time. If you have a memory issue when using a normal image
/// view to load GIF data, you could give this class a try.
/// Kingfisher supports setting GIF animated data to either <code>UIImageView</code> and <code>AnimatedImageView</code> out of box. So
/// it would be fairly easy to switch between them.
SWIFT_CLASS("_TtC8ASAPPSDK17AnimatedImageView")
@interface AnimatedImageView : UIImageView
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly, getter=isAnimating) BOOL animating;
/// Starts the animation.
- (void)startAnimating;
/// Stops the animation.
- (void)stopAnimating;
- (void)displayLayer:(CALayer * _Nonnull)layer;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end







/// :nodoc:
SWIFT_CLASS("_TtC8ASAPPSDK23ComponentViewController")
@interface ComponentViewController : ASAPPViewController
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// :nodoc:
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end











SWIFT_CLASS_NAMED("SessionDelegate")
@interface KFSessionDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSURLSessionTask;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSHTTPURLResponse;
@class NSURLRequest;

@interface KFSessionDelegate (SWIFT_EXTENSION(ASAPPSDK)) <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
@end












































#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
