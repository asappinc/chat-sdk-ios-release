// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ASAPPSDK
@_exported import ASAPPSDK
import AVFoundation
import Accelerate
import AudioToolbox
import CommonCrypto
import Compression
import CoreGraphics
import CoreImage
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
@_inheritsConvenienceInitializers @objc(ASAPPViews) @objcMembers public class ASAPPViews : ObjectiveC.NSObject {
  @objc public var chatTitle: UIKit.UIView?
  @objc deinit
  @objc override dynamic public init()
}
infix operator ←→ : DefaultPrecedence
@objc(ASAPPCustomImage) @objcMembers public class ASAPPCustomImage : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage
  @objc public var size: CoreGraphics.CGSize
  @objc public var insets: UIKit.UIEdgeInsets
  @objc public init(image: UIKit.UIImage, size: CoreGraphics.CGSize, insets: UIKit.UIEdgeInsets = UIEdgeInsets(top: 4, left: 0, bottom: 4, right: 0))
  @objc override dynamic public init()
  @objc deinit
}
@objc(ASAPPInputColors) @objcMembers public class ASAPPInputColors : ObjectiveC.NSObject {
  @objc public var background: UIKit.UIColor
  @objc public var text: UIKit.UIColor
  @objc public var placeholderText: UIKit.UIColor
  @objc public var tint: UIKit.UIColor
  @objc public var border: UIKit.UIColor?
  @objc public var primaryButton: UIKit.UIColor
  @objc public var secondaryButton: UIKit.UIColor
  @objc public init(background: UIKit.UIColor, text: UIKit.UIColor, placeholderText: UIKit.UIColor, tint: UIKit.UIColor, border: UIKit.UIColor?, primaryButton: UIKit.UIColor, secondaryButton: UIKit.UIColor)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(ASAPPNavBarStyles) @objcMembers public class ASAPPNavBarStyles : ObjectiveC.NSObject {
  @objc public var buttonImages: ASAPPSDK.ASAPPNavBarButtonImages
  @objc public var titlePadding: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ASAPPChannel : Swift.Int {
  case chat
  case phone
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ASAPPTextStyles) @objcMembers public class ASAPPTextStyles : ObjectiveC.NSObject {
  @objc public var navButton: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var button: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var actionButton: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var link: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var header1: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var header2: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var header3: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var subheader: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var body: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var bodyBold: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var body2: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var bodyBold2: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var detail1: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var detail2: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public var error: ASAPPSDK.ASAPPTextStyle {
    @objc get
    @objc set
  }
  @objc public func updateStyles(for fontFamily: ASAPPSDK.ASAPPFontFamily)
  @objc public func updateColors(with color: UIKit.UIColor)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ASAPPFontFamily) @objcMembers public class ASAPPFontFamily : ObjectiveC.NSObject {
  @objc final public let light: UIKit.UIFont
  @objc final public let regular: UIKit.UIFont
  @objc final public let medium: UIKit.UIFont
  @objc final public let bold: UIKit.UIFont
  @objc public init(light: UIKit.UIFont, regular: UIKit.UIFont, medium: UIKit.UIFont, bold: UIKit.UIFont)
  @objc public init?(lightFontName: Swift.String, regularFontName: Swift.String, mediumFontName: Swift.String, boldFontName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
infix operator |> : AdditionPrecedence
@_inheritsConvenienceInitializers @objc(ASAPPStyles) @objcMembers public class ASAPPStyles : ObjectiveC.NSObject {
  @objc public var textStyles: ASAPPSDK.ASAPPTextStyles
  @objc public var colors: ASAPPSDK.ASAPPColors
  @objc public var navBarStyles: ASAPPSDK.ASAPPNavBarStyles
  @objc public var primaryButtonRoundingStyle: ASAPPSDK.ASAPPPrimaryButtonRoundingStyle
  @objc public var allowedOrientations: ASAPPSDK.ASAPPAllowedOrientations
  @objc public var isDarkModeAllowed: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum ASAPPAllowedOrientations : Swift.Int, Swift.CaseIterable {
  case portraitLocked
  case iPadLandscapeAllowed
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [ASAPPSDK.ASAPPAllowedOrientations]
  public static var allCases: [ASAPPSDK.ASAPPAllowedOrientations] {
    get
  }
}
public typealias ASAPPRequestContextProvider = ((Swift.Bool) -> [Swift.String : Any])
@objc(ASAPPUser) @objcMembers public class ASAPPUser : ObjectiveC.NSObject {
  @objc final public let isAnonymous: Swift.Bool
  @objc final public let userIdentifier: Swift.String
  @objc final public let requestContextProvider: ASAPPSDK.ASAPPRequestContextProvider
  @objc public init(userIdentifier: Swift.String?, requestContextProvider: @escaping ASAPPSDK.ASAPPRequestContextProvider)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum ASAPPError : Swift.Int {
  case getChatStatusFailed
  case pushDeregistrationFailed
  case authenticationFailed
  case openChannelFailed
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ASAPPTextStyle) @objcMembers public class ASAPPTextStyle : ObjectiveC.NSObject {
  @objc(ASAPPCaseStyle) public enum ASAPPCaseStyle : Swift.Int {
    case upper
    case start
    case original
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(font: UIKit.UIFont, size: CoreGraphics.CGFloat, letterSpacing: CoreGraphics.CGFloat, color: UIKit.UIColor, case: ASAPPSDK.ASAPPTextStyle.ASAPPCaseStyle = .original)
  @objc override dynamic public init()
  @objc deinit
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension _AnyEncodable {
}
@objc public enum ASAPPLogLevel : Swift.Int {
  case none = 0
  case errors = 1
  case warning = 2
  case debug = 3
  case info = 4
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
extension UIActivityIndicatorView.Style {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ComponentViewController : ASAPPSDK.ASAPPViewController {
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillLayoutSubviews()
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ASAPPViewController) public class ASAPPViewController : UIKit.UIViewController {
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillLayoutSubviews()
}
extension ASAPPViewController {
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
}
extension ASAPPViewController {
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
@objc public protocol ASAPPDelegate {
  @objc func chatViewControllerDidTapUserLoginButton()
  @objc func chatViewControllerDidDisappear()
  @objc func chatViewControllerDidTapDeepLink(name: Swift.String, data: [Swift.String : Any]?)
  @objc func chatViewControllerShouldHandleWebLink(url: Foundation.URL) -> Swift.Bool
  @objc func chatViewControllerDidReceiveChatEvent(name: Swift.String, data: [Swift.String : Any]?)
}
@_inheritsConvenienceInitializers @objc(ASAPP) @objcMembers public class ASAPP : ObjectiveC.NSObject {
  @objc @available(*, deprecated, message: "This property will be removed in the next major version.")
  public static let authTokenKey: Swift.String
  @objc @available(*, deprecated, message: "This property will be removed in the next major version.")
  public static let analyticsKey: Swift.String
  @objc public static var clientVersion: Swift.String {
    @objc get
  }
  @objc weak public static var delegate: ASAPPSDK.ASAPPDelegate?
  @objc public static var config: ASAPPSDK.ASAPPConfig! {
    get
  }
  @objc public static var user: ASAPPSDK.ASAPPUser! {
    @objc get
    @objc set
  }
  @objc public static var styles: ASAPPSDK.ASAPPStyles
  @objc public static var strings: ASAPPSDK.ASAPPStrings
  @objc public static var views: ASAPPSDK.ASAPPViews
  @objc public static var debugLogLevel: ASAPPSDK.ASAPPLogLevel
  @objc public class func initialize(with config: ASAPPSDK.ASAPPConfig)
  @objc public class func createChatViewControllerForPushing(fromNotificationWith userInfo: [Swift.AnyHashable : Any]?) -> UIKit.UIViewController?
  @objc public class func createChatViewControllerForPushing(withIntent intent: [Swift.String : Any]) -> UIKit.UIViewController?
  @objc public class func createChatViewControllerForPresenting(fromNotificationWith userInfo: [Swift.AnyHashable : Any]?) -> UIKit.UIViewController?
  @objc public class func createChatViewControllerForPresenting(withIntent intent: [Swift.String : Any]) -> UIKit.UIViewController?
  @objc public class func createChatViewControllerForPresentingFromChatInstead() -> UIKit.UIViewController?
  @objc public class func createChatViewControllerForPushingFromChatInstead() -> UIKit.UIViewController?
  public static var shouldRequestCameraAuthorization: Swift.Bool?
  public static var shouldRequestPhotoLibraryAuthorization: Swift.Bool?
  @objc public static var shouldRequestNotificationAuthorization: Swift.Bool
  @objc public static var notificationAuthorizationDenied: (() -> Swift.Void)?
  @objc public class func enablePushNotifications(with deviceToken: Foundation.Data)
  @objc(enablePushNotificationsWithUUID:) public class func enablePushNotifications(with uuid: Swift.String)
  @objc public class func disablePushNotifications(failure: @escaping ASAPPSDK.ASAPP.FailureHandler)
  @objc public class func skipToBottom()
  public typealias ChatStatusHandler = ((Swift.Int, Swift.Bool) -> Swift.Void)
  public typealias FailureHandler = ((ASAPPSDK.ASAPPError) -> Swift.Void)
  @objc public class func getChatStatus(success: @escaping ASAPPSDK.ASAPP.ChatStatusHandler, failure: @escaping ASAPPSDK.ASAPP.FailureHandler)
  @objc public class func canHandleNotification(with userInfo: [Swift.AnyHashable : Any]?) -> Swift.Bool
  @objc public class func clearSavedSession()
  @objc public static func setIntent(_ data: [Swift.String : Any])
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(ASAPPColors) @objcMembers public class ASAPPColors : ObjectiveC.NSObject {
  @objc public var primary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var onPrimary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var onBackground: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var navBarBackground: UIKit.UIColor?
  @objc public var navBarTitle: UIKit.UIColor
  @objc public var navBarButton: UIKit.UIColor
  @objc public var navBarButtonActive: UIKit.UIColor
  @objc public var background: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var separatorPrimary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var separatorSecondary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var controlTint: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var controlSecondary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var controlBackground: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var success: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var warning: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var failure: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var textButtonPrimary: ASAPPSDK.ASAPPButtonColors {
    @objc get
    @objc set
  }
  @objc public var buttonPrimary: ASAPPSDK.ASAPPButtonColors {
    @objc get
    @objc set
  }
  @objc public var buttonSecondary: ASAPPSDK.ASAPPButtonColors {
    @objc get
    @objc set
  }
  @objc public var messagesListBackground: UIKit.UIColor
  @objc public var messageText: UIKit.UIColor
  @objc public var messageBackground: UIKit.UIColor
  @objc public var messageBorder: UIKit.UIColor?
  @objc public var replyMessageText: UIKit.UIColor
  @objc public var replyMessageBackground: UIKit.UIColor
  @objc public var replyMessageBorder: UIKit.UIColor
  @objc public var quickReplyButton: ASAPPSDK.ASAPPButtonColors
  @objc public var actionButton: ASAPPSDK.ASAPPButtonColors
  @objc public var chatInput: ASAPPSDK.ASAPPInputColors
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ASAPPStrings) @objcMembers public class ASAPPStrings : ObjectiveC.NSObject {
  @objc public var accessibilityClose: Swift.String
  @objc public var accessibilityMore: Swift.String
  @objc public var accessibilitySend: Swift.String
  @objc public var connectionBannerConnected: Swift.String
  @objc public var connectionBannerConnecting: Swift.String
  @objc public var connectionBannerConnectingWhenSending: Swift.String
  @objc public var connectionBannerDisconnected: Swift.String
  @objc public var connectionBannerNotConnectedWhenSending: Swift.String
  @objc public var connectionBannerFailedToSend: Swift.String
  @objc public var connectionBannerMessageTooLong: Swift.String
  @objc public var chatTitle: Swift.String?
  @objc public var endChatTitle: Swift.String
  @objc public var chatInputPlaceholder: Swift.String
  @objc public var quickRepliesRestartButton: Swift.String
  @objc public var inlineFormFailedToLoad: Swift.String
  @objc public var secureScreenCoverText: Swift.String
  @objc public var requestErrorGenericFailureTitle: Swift.String
  @objc public var requestErrorGenericFailure: Swift.String
  @objc public var messageFailedToSend: Swift.String
  @objc public var alertDismissButton: Swift.String
  @objc public var failureToLoadScreen: Swift.String
  @objc public var failureToLoadScreenReloadButton: Swift.String
  @objc public var failureToLoadScreenCloseButton: Swift.String
  @objc public var requiredFieldEmptyMessage: Swift.String
  @objc public var requiredFieldsEmptyErrorMessage: Swift.String
  @objc public var restartConfirmationTitle: Swift.String
  @objc public var restartConfirmationBody: Swift.String
  @objc public var restartConfirmationRestartButton: Swift.String
  @objc public var restartConfirmationHideButton: Swift.String
  @objc public var modalViewCancelButton: Swift.String
  @objc public var modalViewSubmitButton: Swift.String
  @objc public var modalViewDoneButton: Swift.String
  @objc public var mediaPermissionsErrorTitle: Swift.String
  @objc public var mediaPermissionsErrorMessage: Swift.String
  @objc public var mediaPermissionsErrorCancelButton: Swift.String
  @objc public var mediaPermissionsErrorSettingsButton: Swift.String
  @objc public var accessibilityCloseChatInstead: Swift.String
  @objc public var leaveQueueConfirmationTitle: Swift.String
  @objc public var leaveQueueConfirmationBodyTitle: Swift.String
  @objc public var leaveQueueConfirmationButton: Swift.String
  @objc public var leaveQueueConfirmationHideButton: Swift.String
  @objc public var callInProgressBody: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ASAPPPrimaryButtonRoundingStyle) @objcMembers public class ASAPPPrimaryButtonRoundingStyle : ObjectiveC.NSObject {
  @objc public static var pill: ASAPPSDK.ASAPPPrimaryButtonRoundingStyle
  @objc public static func radius(_ value: Swift.Int) -> ASAPPSDK.ASAPPPrimaryButtonRoundingStyle
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(ASAPPChatInsteadViewController) public class ASAPPChatInsteadViewController : UIKit.UIViewController {
  @objc override dynamic public var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  public init(phoneNumber: Swift.String, delegate: ASAPPSDK.ASAPPChannelDelegate, title: Swift.String? = nil, chatIcon: UIKit.UIImage? = nil)
  @objc public init(phoneNumber: Swift.String, delegate: ASAPPSDK.ASAPPChannelDelegate, title: Foundation.NSString?, chatIcon: UIKit.UIImage? = nil)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension ASAPPChatInsteadViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension ASAPPChatInsteadViewController : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension ASAPPChatInsteadViewController {
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@usableFromInline
internal func _internalInvariant(_ condition: @autoclosure () -> Swift.Bool, _ message: Swift.StaticString = StaticString(), file: Swift.StaticString = #file, line: Swift.UInt = #line)
@objc(ASAPPButtonColors) @objcMembers public class ASAPPButtonColors : ObjectiveC.NSObject {
  @objc public var backgroundNormal: UIKit.UIColor
  @objc public var backgroundHighlighted: UIKit.UIColor
  @objc public var backgroundDisabled: UIKit.UIColor
  @objc public var textNormal: UIKit.UIColor
  @objc public var textHighlighted: UIKit.UIColor
  @objc public var textDisabled: UIKit.UIColor
  @objc public var border: UIKit.UIColor?
  @objc public init(backgroundNormal: UIKit.UIColor, backgroundHighlighted: UIKit.UIColor, backgroundDisabled: UIKit.UIColor, textNormal: UIKit.UIColor, textHighlighted: UIKit.UIColor, textDisabled: UIKit.UIColor, border: UIKit.UIColor?)
  @objc public init(textColor: UIKit.UIColor)
  @objc public init(backgroundColor: UIKit.UIColor, textColor: UIKit.UIColor)
  @objc public init(backgroundColor: UIKit.UIColor, textColor: UIKit.UIColor, border: UIKit.UIColor?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(ASAPPConfig) @objcMembers public class ASAPPConfig : ObjectiveC.NSObject {
  @objc final public let appId: Swift.String
  @objc final public let apiHostName: Swift.String
  @objc final public let clientSecret: Swift.String
  @objc final public let regionCode: Swift.String
  @objc public init(appId: Swift.String, apiHostName: Swift.String, clientSecret: Swift.String, regionCode: Swift.String = "US")
  @objc deinit
  @objc override dynamic public init()
}
extension ASAPPConfig {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(ASAPPNavBarButtonImages) @objcMembers public class ASAPPNavBarButtonImages : ObjectiveC.NSObject {
  @objc public var close: ASAPPSDK.ASAPPCustomImage? {
    @objc get
    @objc set
  }
  @objc public var back: ASAPPSDK.ASAPPCustomImage? {
    @objc get
    @objc set
  }
  @objc public var more: ASAPPSDK.ASAPPCustomImage? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ASAPPChannelDelegate : AnyObject {
  @objc optional func shouldOpenChannel(_ channel: ASAPPSDK.ASAPPChannel) -> Swift.Bool
  @objc func channel(_ channel: ASAPPSDK.ASAPPChannel, didFailToOpenWithErrorDescription errorDescription: Swift.String?)
  @objc func didSelectASAPPChatChannel()
}
extension ASAPPChannelDelegate {
  public func shouldOpenChannel(_ channel: ASAPPSDK.ASAPPChannel) -> Swift.Bool
}
extension ASAPPSDK.ASAPPChannel : Swift.Equatable {}
extension ASAPPSDK.ASAPPChannel : Swift.Hashable {}
extension ASAPPSDK.ASAPPChannel : Swift.RawRepresentable {}
extension ASAPPSDK.ASAPPAllowedOrientations : Swift.Equatable {}
extension ASAPPSDK.ASAPPAllowedOrientations : Swift.Hashable {}
extension ASAPPSDK.ASAPPAllowedOrientations : Swift.RawRepresentable {}
extension ASAPPSDK.ASAPPError : Swift.Equatable {}
extension ASAPPSDK.ASAPPError : Swift.Hashable {}
extension ASAPPSDK.ASAPPError : Swift.RawRepresentable {}
extension ASAPPSDK.ASAPPTextStyle.ASAPPCaseStyle : Swift.Equatable {}
extension ASAPPSDK.ASAPPTextStyle.ASAPPCaseStyle : Swift.Hashable {}
extension ASAPPSDK.ASAPPTextStyle.ASAPPCaseStyle : Swift.RawRepresentable {}
extension ASAPPSDK.ASAPPLogLevel : Swift.Equatable {}
extension ASAPPSDK.ASAPPLogLevel : Swift.Hashable {}
extension ASAPPSDK.ASAPPLogLevel : Swift.RawRepresentable {}
